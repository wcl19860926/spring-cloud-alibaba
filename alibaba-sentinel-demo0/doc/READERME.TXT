一、常用的限流算法
 1、计数器算法是一种比较简单的限流实现算法，在指定周期内累加访问次数，当访问次数达到设定的阈值时， 解发
    限流策略，当进入下一个时间周期时进行访问次数的清零。
 2、令牌桶限流算法
     令牌桶是网络流量整形（Traffic Shaping）和速率限制（Rate Limit）中最常使用的一种算法。对于每一个请求，都
	 需要从令牌桶中获取一个令牌，如果没有获得令牌，则需要触发限流策略。
	    假设令牌生成速度是每秒10个，也就等同于，QPS=10，此时在请求获取令牌的时候，会存在三种情况：
		  （1）、请求速度大于令牌生成速度：那么令牌会很快被取完，后续再进来的请求会被限流。
		  （2）、请求速度等于令牌生成速度：此时流量处于平稳状态。
		  （3）、请求速度小于令牌生成速度：说明此时系统的并发数并不高，请求能被下常处理。
 3、漏桶限流算法
    漏桶限流算法的主要作用是控制数据注入网络的速度，平滑网络上的突发流量。原理是，在漏桶算法内部同样维护一个容器，这个容器会以恒定的速度出水，
	不管上面的水流速度有多快，漏桶水滴的流现速度始终保持不变，实际上消息中间件就使用了漏桶限流的思想，不管生产者的请求量有多大，消息的处理能力
	取决于消费者。
	  在漏桶限流算法中，存在以下几种可能的情况：
	      （1）、求速度大于漏桶流出水滴的速度：也就是请求数超出当前服务所能处理的极限，将会触发限流策略。
		  （2）、请求速度小于或等于漏桶流出水滴的速度，也就是服务端的处理能力正好满足客户端的请求量，将正常执行。


服务降级需要有一个参考指标，一般来说有以下几种常见的方案：
   1、平均响应时间：比如1s内持续进入5个请求，对应的平均响应时间均超过阈值，那么接下来在一个固定的时间窗口内，对这个方的访问都最会自动熔断。
   2、异常比例：当某个方法每秒调用所获得的异常总数的比例超过设寂静的阈值时，该资源会自动进入降级状态，也就是在接下业的一固定时间窗口中，对这个方法的调用都会自动返回。
   3、异常数量：和异常比例类似，当某个方法在指定时间窗口内获得的异常数量超过阈值时会触发熔断。


Sentinel中文文档

https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D

https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel

